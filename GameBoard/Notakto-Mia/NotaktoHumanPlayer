using GameBoard;

namespace Notakto;

 public class NotaktoHumanPlayer : HumanPlayer
    {
        public NotaktoHumanPlayer(int boardSize, int playerNumber)
            : base(boardSize, playerNumber) { }

        public override (int, int, object) GetNextMove(GameBoard.GameBoard gameBoard)
        {
            if (!(gameBoard is NotaktoBoard nb))
                throw new ArgumentException("Expected NotaktoBoard", nameof(gameBoard));

            // Choose a non-dead board
            int boardNum;
            while (true)
            {
                Console.Write("Choose board (1–3): ");
                if (int.TryParse(Console.ReadLine(), out boardNum) && boardNum >= 1 && boardNum <= 3)
                {
                    // if this board is dead, prompt and retry
                    if (nb.IsBoardDead(boardNum - 1))
                    {
                        Console.WriteLine("This board is killed! Please play on one of the other alive boards.");
                        continue;
                    }
                    break;
                }
                Console.WriteLine("Invalid — enter 1, 2 or 3.");
            }

            //  Choose a row within selected board
            int localRow;
            while (true)
            {
                Console.Write("Choose row (A–C): ");
                var s = Console.ReadLine()?.Trim().ToUpper();
                if (!string.IsNullOrEmpty(s) && s.Length == 1 && s[0] >= 'A' && s[0] <= 'C')
                {
                    localRow = s[0] - 'A' + 1;
                    break;
                }
                Console.WriteLine("Invalid — enter A, B or C.");
            }

            // Choose column within selected board
            int col;
            while (true)
            {
                Console.Write("Choose column (1–3): ");
                if (int.TryParse(Console.ReadLine(), out col) && col >= 1 && col <= 3)
                    break;
                Console.WriteLine("Invalid — enter 1, 2 or 3.");
            }

            int globalRow = (boardNum - 1) * 3 + localRow;
            return (globalRow, col, GetValueForNextMove());
        }

        protected override object GetValueForNextMove() => "X";
    }
