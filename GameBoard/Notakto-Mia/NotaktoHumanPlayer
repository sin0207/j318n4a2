using GameBoard;

namespace Notakto;

public class NotaktoHumanPlayer : HumanPlayer
    {
        private const char Symbol = 'X';

        public NotaktoHumanPlayer(int boardSize, int playerNumber)
            : base(boardSize, playerNumber)
        {
        }

        public override (int, int, object) GetNextMove(GameBoard.GameBoard gameBoard)
        {
            if (gameBoard is not NotaktoBoard nb)
                throw new ArgumentException("Expected NotaktoBoard", nameof(gameBoard));

            int row, col;
            while (true)
            {
                (row, col) = RequestUserToChoosePositions(gameBoard);     

                if (col < 1 || col > 3)
                {
                    Console.WriteLine("Invalid column. Please choose A, B or C.");
                    continue;
                }
               
                if (row < 1 || row > 9)
                {
                    Console.WriteLine("Invalid row. Please choose 1 through 9.");
                    continue;
                }

                int seg = (row - 1) / 3;
                // Block killed segments
                if (nb.IsBoardDead(seg))
                {
                    Console.WriteLine($"Board {seg + 1} is [KILLED]! Please choose another live board.");
                    continue;
                }
                // Block occupied cells
                if (!gameBoard.IsAvailablePosition(row, col))
                {
                    Console.WriteLine("That cell is already occupiedâ€”try again.");
                    continue;
                }

                break;
            }

            return (row, col, Symbol);
        }

        protected override object GetValueForNextMove() => Symbol;
    }
