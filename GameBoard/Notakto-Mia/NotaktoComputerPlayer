using GameBoard;

namespace Notakto;

public class NotaktoComputerPlayer : ComputerPlayer
    {
        public NotaktoComputerPlayer(int boardSize, int playerNumber)
            : base(boardSize, playerNumber)
        { }

        public override (int, int, object) GetNextMove(GameBoard.GameBoard gameBoard)
        {
            var nb  = (NotaktoBoard)gameBoard;
            var sym = GetValueForNextMove();

            // 1) Collect all available moves on boards that are still alive
            var allMoves = new List<(int row, int col)>();
            foreach (var r in Enumerable.Range(1, gameBoard.RowSize))
            {
                if (nb.IsBoardDead((r - 1) / 3)) continue;
                foreach (var c in Enumerable.Range(1, gameBoard.ColSize))
                    if (gameBoard.IsAvailablePosition(r, c))
                        allMoves.Add((r, c));
            }

            // 2) Count how many boards remain alive
            int aliveCount = Enumerable.Range(0, 3)
                                       .Count(i => !nb.IsBoardDead(i));

            // 3) If there's more than one board, any move is “safe” from immediate loss.
            //    If there's exactly one board left, filter out moves that would kill it.
            var safeMoves = new List<(int row, int col)>();
            foreach (var (r, c) in allMoves)
            {
                bool killsBoard =
                    aliveCount == 1
                    && nb.CheckWin(r, c, sym);   // true if this move completes three-in-a-row
                if (!killsBoard)
                    safeMoves.Add((r, c));
            }

            // 4) Choose among safe moves if there are any, otherwise we must lose
            var choices = safeMoves.Any() ? safeMoves : allMoves;

            // 5) Pick one at random
            var rnd  = new Random();
            var pick = choices[rnd.Next(choices.Count)];
            return (pick.row, pick.col, sym);
        }

        protected override object GetValueForNextMove() => "X";
    }
